{"version":3,"sources":["algorithm/genetic-algorithm.js","components/ResultField.js","components/InputForm.js","App.js","serviceWorker.js","index.js"],"names":["GeneticAlgorithm","target","popSize","regenRate","mutateRate","_this","this","Object","classCallCheck","generateCharacter","String","fromCharCode","Math","floor","random","generatePopulation","size","p","i","indiv","_iteratorNormalCompletion","_didIteratorError","_iteratorError","undefined","_step","_iterator","Symbol","iterator","next","done","value","err","return","push","checkFitness","r","score","length","breed","indiv1","indiv2","child","selectParent","totalScore","selection","partialSum","_iteratorNormalCompletion2","_didIteratorError2","_iteratorError2","_step2","_iterator2","run","generation","population","resultList","results","map","sort","x","y","elders","splice","reduce","total","highestScoreIndiv","console","log","react_default","a","createElement","key","toString","ResultRecord","props","ResultField","_this$props","resultTarget","className","ResultField_ResultRecord","Component","InputForm","possibleConstructorReturn","getPrototypeOf","call","handleChange","event","name","setState","defineProperty","handleChangeRate","handleInput","simStart","handleReset","state","_this$state","startSim","components_ResultField","handler","type","onChange","onClick","App","components_InputForm","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.fce1d22d.chunk.js","sourcesContent":["import React from 'react';\n\nclass GeneticAlgorithm {\n    constructor (target, popSize, regenRate, mutateRate) {\n        this.target = target;\n        this.popSize = popSize;\n        this.regenRate = regenRate;\n        this.mutateRate = mutateRate;\n    }\n\n    generateCharacter = () => String.fromCharCode(Math.floor(Math.random() * 94) + 32);\n\n    generatePopulation = (size) => {\n        let p = []; // population\n        for (let i = 0; i < size; i++) {\n            let indiv = ''; // character \n            for (let c of this.target) {\n                indiv += this.generateCharacter();\n            }\n            p.push(indiv)\n        }\n        return p\n    }\n\n    checkFitness = (indiv) => {\n        let r = {value: indiv, score: 0};\n        for (let i = 0; i < indiv.length; i++) {\n            if (r.value[i] === this.target[i]) {\n                r.score++\n            } \n        }\n        return r;\n    };\n\n    breed = (indiv1, indiv2) => {\n        let child = '';\n        for (let i in this.target) {\n            if (Math.random() < this.mutateRate) {\n                child += this.generateCharacter(); \n            } else  {\n                if (Math.random() < 0.5) {\n                    child += indiv1[i]\n                } else {\n                    child += indiv2[i]\n                }\n            }\n        }\n        return child;\n    }\n\n    selectParent = (p, totalScore) => {\n        let selection = Math.random() * totalScore;\n        let partialSum = 0;\n        for (let i of p) {\n            partialSum += i.score;\n            if (selection <= partialSum) {\n                return i;\n            }\n        }\n    }\n    \n    run = () => {\n        let generation = 0;\n        let population = this.generatePopulation(this.popSize);\n        let resultList = [];\n\n        do {\n            generation += 1;\n            let results = population.map(this.checkFitness).sort((x, y) => y.score - x.score);\n            \n            if (results[0].value !== this.target) {\n                //Take elders\n                let elders = results.splice(0, this.popSize * (1 - this.regenRate));\n                //Selection and breeding\n                population = elders.map(indiv => indiv.value);\n                let totalScore = elders.reduce((total, indiv) => total + indiv.score, 0);\n\n                for (let i = 0; i < this.popSize * this.regenRate; ++i) {\n                    population.push(this.breed(this.selectParent(elders, totalScore).value, this.selectParent(elders, totalScore).value));\n                }\n            } else {\n                population = results.map(indiv => indiv.value)\n            }\n\n            resultList.push({\n                generation: generation,\n                highestScoreIndiv: population[0],\n                score: results[0].score\n            });\n        } while (population[0] !== this.target);\n        console.log(resultList);\n        return (<div>{resultList.map((value) => (\n            <div key={value.generation.toString()} >Generation {value.generation}: '{value.highestScoreIndiv}'. Score: {value.score}</div>\n        ))}</div>)\n    }\n}\n\nexport default GeneticAlgorithm;","import React, { Component } from 'react';\nimport GeneticAlgorithm from '../algorithm/genetic-algorithm';\n\nconst ResultRecord = (props) => {\n    let simulation = new GeneticAlgorithm(props.target, props.size, props.regenRate, props.mutateRate);\n    \n    return simulation.run();\n}\n\nclass ResultField extends Component {\n    \n    render() {\n        const { resultTarget, popSize, regenRate, mutateRate } = this.props;\n        \n        return (\n            <div className=\"App\">\n                <p>Using a population size of {popSize}. Regenerating {regenRate*100}% of the population per generation, {mutateRate*100}% chance of mutation for each chromosome.</p>\n                <ResultRecord target={resultTarget} size={popSize} regenRate={regenRate} mutateRate={mutateRate} />\n            </div>\n        );\n    }\n}\n\nexport default ResultField;\n","import React, { Component } from 'react';\nimport ResultField from './ResultField';\n\nclass InputForm extends Component {\n    constructor(props){\n        super(props)\n        this.state = {\n            resultTarget:'Nguyen Ngoc Long Phung',\n            popSize:'1000',\n            regenRate:'0.75',\n            mutateRate:'0.01',\n            simStart: false\n        }\n    }\n\n    handleChange = (event) => {\n        const name = event.target.name;\n        const value = event.target.value;\n\n        this.setState({\n            [name]: value\n        })\n    }\n\n    handleChangeRate = (event) => {\n        const name = event.target.name;\n        const value = event.target.value;\n\n        this.setState({\n            [name]: value/100\n        })\n    }\n\n    handleInput = () => {\n        this.setState({simStart: true})\n    }\n\n    handleReset = () => {\n        this.setState({\n            resultTarget:'Nguyen Ngoc Long Phung',\n            popSize:'1000',\n            regenRate:'0.75',\n            mutateRate:'0.01',\n            simStart: false\n        }) \n    }\n\n    render() {\n        const { resultTarget, popSize, regenRate, mutateRate, simStart } = this.state;\n\n        let startSim = simStart ? (<ResultField resultTarget={resultTarget} popSize={popSize} regenRate={regenRate} mutateRate={mutateRate} handler={this.handleReset} />) : (null);\n\n        return (\n            <div className=\"App\">\n                <label>\n                    Target\n                    <br />\n                    <input type=\"text\" name=\"resultTarget\" onChange={this.handleChange} value={resultTarget} />\n                    <br />\n                </label>\n                \n                <label>\n                    Population Size\n                    <br />\n                    <input type=\"text\" name=\"popSize\" onChange={this.handleChange} value={popSize} />\n                    <br />\n                </label>\n               \n                <label>\n                    Regeneration Rate\n                    <br />\n                    <input type=\"text\" name=\"regenRate\" onChange={this.handleChangeRate} value={regenRate*100} />\n                    <br />\n                </label>\n               \n                <label>\n                    Mutation Rate\n                    <br />\n                    <input type=\"text\" name=\"mutateRate\" onChange={this.handleChangeRate} value={mutateRate*100} />\n                    <br />\n                </label>\n                \n                <button onClick={this.handleInput} >Start Simulation</button>\n                <button onClick={this.handleReset} >Reset</button>\n                \n                {startSim}\n            </div>\n        );\n  }\n}\n\nexport default InputForm;\n","import React, { Component } from 'react';\n\nimport InputForm from './components/InputForm';\nimport './App.css';\n\nclass App extends Component {\n  render() {\n    return (\n      <div className=\"App\">\n        <InputForm />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}